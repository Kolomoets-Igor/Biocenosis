class Predator extends Agent {

    public Predator(int x, int y, Ecosystem ecosystem) {
        super(x, y, ecosystem);
        energy = 100;
    }

    @Override
    public void update() {
        energy -= 0.4; // метаболизм

        double[] inputs = sense();

        double[] outputs = brain.forward(inputs);

        int dx = 0, dy = 0;

        if (outputs[0] > 0.5) dx = 1;
        else if (outputs[1] > 0.5) dx = -1;

        if (outputs[2] > 0.5) dy = 1;
        else if (outputs[3] > 0.5) dy = -1;

        move(dx, dy);

        // Поиск и поедание травоядного на текущей клетке
        Agent prey = ecosystem.getHerbivoreAt(x, y);
        if (prey != null) {
            energy += 50;
            ecosystem.removeAgent(prey);
        }

        if (energy > 180) {
            energy /= 2;
            int nx = x + (int)(Math.random() * 3 -1);
            int ny = y + (int)(Math.random() * 3 -1);

            if(nx >=0 && nx < ecosystem.width && ny >=0 && ny < ecosystem.height)
                ecosystem.addAgent(new Predator(nx, ny, ecosystem));
        }
    }

    private double[] sense() {
        double[] inputs = new double[5];
        inputs[0] = ecosystem.distanceToNearestHerbivore(x, y-1);
        inputs[1] = ecosystem.distanceToNearestHerbivore(x+1, y);
        inputs[2] = ecosystem.distanceToNearestHerbivore(x, y+1);
        inputs[3] = ecosystem.distanceToNearestHerbivore(x-1, y);
        inputs[4] = energy / 200.0;
        return inputs;
    }

    @Override
    public int getInputSize() { return 5; }

    @Override
    public int getOutputSize() { return 4; }

    @Override
    public Color getColor() { return Color.RED; }
}
